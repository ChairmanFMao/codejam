#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define sz(c) (int)c.size()
#define all(c) c.begin(),c.end()

// I can think of an O(2^(n^2)) solution
// Need to reduce the time complexity
vector<vector<int> > m = {{-1,0},{0,1},{1,0},{0,-1}};
const int mxN = 1e4;
int grid[mxN][mxN];
int n, k, target;
vector<pair<int,int> > out;

bool dfs(int x, int y, int skip) {
	if (!skip) {
	
	}
	int best = 0;
	int nx, ny;
	for (int i = 0; i < 4; i++) {
		if (y + m[i][0] >= 0 && y + m[i][0] < n && x + m[i][1] >= 0 && x + m[i][1] < n && grid[y][x] - grid[y+m[i][0]][x+m[i][1]] > best && grid[y][x] - grid[y+m[i][0]][x+m[i][1]] <= skip) {
			best = grid[y][x] - grid[y+m[i][0]][x+m[i][1]];
			nx = x + m[i][1];
			ny = y + m[i][0];
		}
	}

	if (best > 1)
		out.push_back({grid[y][x],grid[ny][nx]});
	return dfs(nx, ny, skip-best);
}

void solve() {
	cin >> n >> k;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			grid[i][j] = 0;

	if (k < n-1 || k & 1) {
		cout << "IMPOSSIBLE\n";
		return;
	}

	target = n>>1;
	int x = 0, y = 0, direction = 1, count = 1;

	while (x != target || y != target) {
		grid[y][x] = count;
		x += m[direction][1];
		y += m[direction][0];
		if (grid[y][x] || x >= n || y >= n || x < 0 || y < 0) {
			x -= m[direction][1];
			y -= m[direction][0];
			direction = (direction + 1) % 4;
			x += m[direction][1];
			y += m[direction][0];
		}
		count++;
	}
	grid[target][target] = count;

	if (!dfs(0,0,n*n-1-k))
		cout << "IMPOSSIBLE\n";
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	
	int t;
	cin >> t;
	for (int i = 1; i <= t; ++i) {
		cout << "Case #" << i << ": ";
		solve();
	}
}


